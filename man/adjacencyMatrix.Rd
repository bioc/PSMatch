% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/adjacencyMatrix.R
\name{adjacencyMatrix}
\alias{adjacencyMatrix}
\alias{makeAdjacencyMatrix}
\alias{makePeptideProteinVector}
\title{Convert to/from an adjacency matrix.}
\usage{
makeAdjacencyMatrix(
  x,
  split = ";",
  peptide = psmVariables(x)["peptide"],
  protein = psmVariables(x)["protein"]
)

makePeptideProteinVector(m, collapse = ";")
}
\arguments{
\item{x}{Either an instance of class \code{PSM} or a \code{character}. See
example below for details.}

\item{split}{\code{character(1)} defining how to split the string of
protein identifiers (using \code{\link[=strsplit]{strsplit()}}). Default is ";". If
\code{NULL}, splitting is ignored.}

\item{peptide}{\code{character(1)} indicating the name of the variable
that defines peptides in the \code{PSM} object. Default is the
\code{peptide} PSM variable as defined in \code{\link[=psmVariables]{psmVariables()}}.}

\item{protein}{\code{character(1)} indicating the name of the variable
that defines proteins in the \code{PSM} object. Default is the
\code{peptide} PSM variable as defined in \code{\link[=psmVariables]{psmVariables()}}.Default
is \code{DatanbaseAccess}.}

\item{m}{An adjacency matrix.}

\item{collapse}{\code{character(1)} indicating how to collapse protein
names for non-proteotypic peptides. Default is \code{";"}.}
}
\value{
A peptide-by-protein adjacency matrix or peptide/protein
vector.
}
\description{
There are two ways that peptide/protein matches are commonly
stored: either as a vector or an adjacency matrix. The functions
described below convert between these two format.
}
\details{
The \code{\link[=makeAdjacencyMatrix]{makeAdjacencyMatrix()}} function creates a peptide-by-protein
adjacency matrix from a \code{character} or an instance of class
\code{\link[=PSM]{PSM()}}.

The character is formatted as \code{x <- c("ProtA", "ProtB", "ProtA;ProtB", ...)}, as commonly encoutered in proteomics data
spreadsheets. It defines that the first peptide is mapped to
protein "ProtA", the second one to protein "ProtB", the third one
to "ProtA" and "ProtB", and so on. The resulting matrix contain
\code{length(x)} rows an as many columns as there are unique protein
idenifiers in \code{x}. The columns are named after the protein
idenifiers and the peptide/protein vector namesa are used to name
to matrix rows (even if these aren't unique).

The \code{\link[=makePeptideProteinVector]{makePeptideProteinVector()}} function does the opposite
operation, taking an adjacency matrix as input and retruning a
peptide/protein vector. The matrix colnames are used to populate
the vector and the matrix rownames are used to name the vector
elements.
}
\examples{

## -----------------------
## From a character
## -----------------------

## Protein vector without names
prots <- c("ProtA", "ProtB", "ProtA;ProtB")
makeAdjacencyMatrix(prots)

## Named protein vector
names(prots) <- c("pep1", "pep2", "pep3")
prots
m <- makeAdjacencyMatrix(prots)
m

## Back to vector
vec <- makePeptideProteinVector(m)
vec
identical(prots, vec)

## -----------------------
## From a PSM object
## -----------------------

f <- msdata::ident(full.names = TRUE, pattern = "TMT")
psm <- PSM(f) |>
       filterPsmDecoy() |>
       filterPsmRank()
psm
adj <- makeAdjacencyMatrix(psm)
dim(adj)
adj[1:10, 1:4]
## Peptides with rowSums > 1 match multiple proteins.
## Use filterPsmNonProteotypic() to filter these out.
table(rowSums(adj))
}
\author{
Laurent Gatto
}
